use rand::Rng;
use std::process::Command;
fn main() {
    //This section is here just to capture the return value of its function
    let daily_commits = daily_commit_amount_randomizer();
    let random_increments = commit_date_randomizer();
    //-------------------------------------------------------------------//
    function_that_does_the_job(daily_commits,random_increments);
}
fn daily_commit_amount_randomizer() -> i32 {
    let daily_commits = rand::thread_rng().gen_range(1..=4);
    println!("{}",daily_commits);
    return daily_commits;
}
fn commit_date_randomizer() -> i32 {
    let random_increments = rand::thread_rng().gen_range(1..=6);
    return random_increments;
}
fn function_that_does_the_job(daily_commits: i32, random_increments: i32) {
    //This loop is to ensure the day values change this is the core loop, though i dont know much about nesting loops and how that would affect code quality
    loop {
        //This loop is here to for the committing done in a single day i.e. if the daily_commits returns 4 then it runs this loop 4 times such that it commits 4 times in that specific day
        //The use u ask:>>
        //This gives the github commit graph different shades of green that shows how much you've commited per day and gives your repo a natural feel and not one that was generated by a bot ;)
        
        for _ in 0..daily_commits {
                let output = Command::new("git")
                    .arg("push")
                    .arg("origin")
                    .arg("main")
                    .output()
                    .expect("this is not working");
                println!("{}",String::from_utf8_lossy(&output.stdout));
                 if !output.status.success(){
                    eprintln!("Error executing command: {:?}", output);
                }
            }
        //code goes here for the day increment
        print!("{}",random_increments);
        break;
        }
}
